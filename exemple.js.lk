abs(number);
acos(argument);
arrayConcat(array1, array2);
arrayFilter(array, callback);
arrayFlatten(array);
arrayFlatten(array, depth);
arrayFoldLeft(array, f, v0);
arrayFoldRight(array, f, v0);
arrayIter(array, callback);
arrayMap(array, callback);
arrayMax(array);
arrayMin(array);
arrayPartition(array, callback);
arraySort(array, callback);
asin(argument);
assocSort(array);
assocSort(array, order);
atan(argument);
atan2(y, x);
average(array);
canUseChip(chip, leek);
canUseChipOnCell(chip, cell);
canUseWeapon(leek);
canUseWeapon(weapon, leek);
canUseWeaponOnCell(cell);
canUseWeaponOnCell(weapon, cell);
cbrt(number);
ceil(number);
charAt(string, position);
chipNeedLos(chip);
contains(string, search);
cos(angle);
count(array);
debug(object);
debugC(object, color);
debugE(object);
debugW(object);
deleteRegister(key);
endsWith(string, suffix);
exp(number);
fill(array, value);
fill(array, value, size);
floor(number);
getAbsoluteShield();
getAbsoluteShield(leek);
getAgility();
getAgility(leek);
getAIID();
getAIID(leek);
getAIName();
getAIName(leek);
getAliveAllies();
getAliveEnemies();
getAliveEnemiesCount();
getAllies();
getAlliesCount();
getAlliesLife();
getBirthTurn();
getBirthTurn(entity);
getBlue(color);
getCell();
getCell(leek);
getCellContent(cell);
getCellDistance(cell1, cell2);
getCellFromXY(x, y);
getCellsToUseChip(chip, leek);
getCellsToUseChip(chip, leek, ignoredCells);
getCellsToUseChipOnCell(chip, cell);
getCellsToUseChipOnCell(chip, cell, ignoredCells);
getCellsToUseWeapon(leek);
getCellsToUseWeapon(weapon, leek);
getCellsToUseWeapon(weapon, leek, ignoredCells);
getCellsToUseWeaponOnCell(cell);
getCellsToUseWeaponOnCell(weapon, cell);
getCellsToUseWeaponOnCell(weapon, cell, ignoredCells);
getCellToUseChip(chip, leek);
getCellToUseChip(chip, leek, ignoredCells);
getCellToUseChipOnCell(chip, cell, ignoredCells);
getCellToUseChipOnCell(chip, cell);
getCellToUseWeapon(leek);
getCellToUseWeapon(weapon, leek);
getCellToUseWeapon(weapon, leek, ignoredCells);
getCellToUseWeaponOnCell(cell);
getCellToUseWeaponOnCell(weapon, cell);
getCellToUseWeaponOnCell(weapon, cell, ignoredCells);
getCellX(cell);
getCellY(cell);
getChipArea(chip);
getChipCooldown(chip);
getChipCost(chip);
getChipEffectiveArea(chip, cell);
getChipEffectiveArea(chip, cell, from);
getChipEffects(chip);
getChipFailure(chip);
getChipMaxRange(chip);
getChipMaxScope(chip);
getChipMinRange(chip);
getChipMinScope(chip);
getChipName(chip);
getChips();
getChips(leek);
getChipTargets(chip, cell);
getColor(red, green, blue);
getCooldown(chip);
getCooldown(chip, leek);
getCores();
getCores(leek);
getDamageReturn();
getDamageReturn(leek);
getDeadAllies();
getDeadEnemies();
getDeadEnemiesCount();
getDistance(cell1, cell2);
getEffects();
getEffects(leek);
getEnemies();
getEnemiesCount();
getEnemiesLife();
getEntityTurnOrder();
getEntityTurnOrder(entity);
getFarmerCountry();
getFarmerCountry(leek);
getFarmerID();
getFarmerID(leek);
getFarmerName();
getFarmerName(leek);
getFarthestAlly();
getFarthestEnemy();
getFightContext();
getFightType();
getForce();
getForce(leek);
getFrequency();
getFrequency(leek);
getGreen(color);
getInstructionsCount();
getLaunchedEffects();
getLaunchedEffects(leek);
getLeek();
getLeekID();
getLeekID(leek);
getLeekOnCell(cell);
getLevel();
getLevel(leek);
getLife();
getLife(leek);
getMagic();
getMagic(leek);
getMapType();
getMessageAuthor(message);
getMessageParams(message);
getMessages();
getMessages(leek);
getMessageType(message);
getMP();
getMP(leek);
getName();
getName(leek);
getNearestAlly();
getNearestAllyTo(leek);
getNearestAllyToCell(cell);
getNearestEnemy();
getNearestEnemyTo(leek);
getNearestEnemyToCell(cell);
getNextPlayer();
getObstacles();
getOperations();
getPath(cell1, cell2);
getPath(start, end, ignoredCells);
getPathLength(cell1, cell2);
getPathLength(cell1, cell2, ignoredCells);
getPreviousPlayer();
getRed(color);
getRegister(key);
getRegisters();
getRelativeShield();
getRelativeShield(leek);
getResistance();
getResistance(leek);
getScience();
getScience(leek);
getStrength();
getStrength(leek);
getSummoner();
getSummoner(entity);
getTeamID();
getTeamID(leek);
getTeamName();
getTeamName(leek);
getTotalLife();
getTotalLife(leek);
getTotalMP();
getTotalMP(leek);
getTotalTP();
getTotalTP(leek);
getTP();
getTP(leek);
getTurn();
getType();
getType(entity);
getWeapon();
getWeapon(leek);
getWeaponArea(weapon);
getWeaponCost(weapon);
getWeaponEffectiveArea(cell);
getWeaponEffectiveArea(weapon, cell);
getWeaponEffectiveArea(weapon, cell, from);
getWeaponEffects(weapon);
getWeaponFailure(weapon);
getWeaponMaxRange(weapon);
getWeaponMaxScope(weapon);
getWeaponMinRange(weapon);
getWeaponMinScope(weapon);
getWeaponName(weapon);
getWeapons();
getWeapons(leek);
getWeaponTargets(cell);
getWeaponTargets(weapon, cell);
getWisdom();
getWisdom(leek);
hypot(x, y);
inArray(array, element);
include(ai);
indexOf(string, search);
indexOf(string, search, start);
insert(array, element, position);
isAlive(leek);
isAlly(leek);
isChip(value);
isDead(leek);
isEmpty(array);
isEmptyCell(cell);
isEnemy(leek);
isInlineChip(chip);
isInlineWeapon(weapon);
isLeek(cell);
isObstacle(cell);
isOnSameLine(cell1, cell2);
isSummon();
isSummon(entity);
isWeapon(value);
join(array, glue);
jsonDecode(json);
jsonEncode(object);
keySort(array);
keySort(array, order);
length(string);
lineOfSight(start, end);
lineOfSight(start, end, leekToIgnore);
listen();
log(number);
log10(number);
mark(cells);
mark(cells, color);
mark(cells, color, duration);
max(a, b);
min(a, b);
moveAwayFrom(leek);
moveAwayFrom(leek, mp);
moveAwayFromCell(cell);
moveAwayFromCell(cell, mp);
moveAwayFromCells(cells);
moveAwayFromCells(cells, mp);
moveAwayFromLeeks(leeks);
moveAwayFromLeeks(leeks, mp);
moveAwayFromLine(cell1, cell2);
moveAwayFromLine(cell1, cell2, mp);
moveToward(leek);
moveToward(leek, mp);
moveTowardCell(cell);
moveTowardCell(cell, mp);
moveTowardCells(cells);
moveTowardCells(cells, mp);
moveTowardLeeks(leeks);
moveTowardLeeks(leeks, mp);
moveTowardLine(cell1, cell2);
moveTowardLine(cell1, cell2, mp);
number(value);
pause();
pop(array);
pow(base, exp);
push(array, element);
pushAll(array, elements);
rand();
randFloat(a, b);
randInt(a, b);
remove(array, position);
removeElement(array, element);
removeKey(array, key);
replace(string, search, replace);
resurrect(entity, cell);
reverse(array);
round(number);
say(message);
search(array, element);
search(array, element, start);
sendAll(type, params);
sendTo(leek, type, params);
setRegister(key, value);
setWeapon(weapon);
shift(array);
show(cell);
show(cell, color);
shuffle(array);
signum(number);
sin(angle);
sort(array);
sort(array, order);
split(string, delimiter);
split(string, delimiter, limit);
sqrt(number);
startsWith(string, prefix);
string(value);
subArray(array, start, end);
substring(string, start);
substring(string, start, length);
sum(array);
summon(chip, cell, ai);
tan(angle);
toDegrees(radians);
toLower(string);
toRadians(degrees);
toUpper(string);
typeOf(value);
unshift(array, element);
useChip(chip, leek);
useChipOnCell(chip, cell);
useWeapon(leek);
useWeaponOnCell(cell);
weaponNeedLos();
weaponNeedLos(weapon);
AREA_CIRCLE_1;
AREA_CIRCLE_2;
AREA_CIRCLE_3;
AREA_LASER_LINE;
AREA_POINT;
CELL_EMPTY;
CELL_OBSTACLE;
CELL_PLAYER;
CHIP_ACCELERATION;
CHIP_ADRENALINE;
CHIP_ANTIDOTE;
CHIP_ARMOR;
CHIP_ARMORING;
CHIP_BALL_AND_CHAIN;
CHIP_BANDAGE;
CHIP_BARK;
CHIP_BURNING;
CHIP_CARAPACE;
CHIP_COLLAR;
CHIP_CURE;
CHIP_DEVIL_STRIKE;
CHIP_DOPING;
CHIP_DRIP;
CHIP_FEROCITY;
CHIP_FERTILIZER;
CHIP_FIRE_BULB;
CHIP_FLAME;
CHIP_FLASH;
CHIP_FORTRESS;
CHIP_FRACTURE;
CHIP_HEALER_BULB;
CHIP_HELMET;
CHIP_ICE;
CHIP_ICEBERG;
CHIP_ICED_BULB;
CHIP_INVERSION;
CHIP_LEATHER_BOOTS;
CHIP_LIBERATION;
CHIP_LIGHTNING;
CHIP_LIGHTNING_BULB;
CHIP_LOAM;
CHIP_METALLIC_BULB;
CHIP_METEORITE;
CHIP_MIRROR;
CHIP_MOTIVATION;
CHIP_PEBBLE;
CHIP_PLAGUE;
CHIP_PROTEIN;
CHIP_PUNY_BULB;
CHIP_RAGE;
CHIP_RAMPART;
CHIP_REFLEXES;
CHIP_REGENERATION;
CHIP_REMISSION;
CHIP_RESURRECTION;
CHIP_ROCK;
CHIP_ROCKFALL;
CHIP_ROCKY_BULB;
CHIP_SEVEN_LEAGUE_BOOTS;
CHIP_SHIELD;
CHIP_SHOCK;
CHIP_SLOW_DOWN;
CHIP_SOLIDIFICATION;
CHIP_SOPORIFIC;
CHIP_SPARK;
CHIP_STALACTITE;
CHIP_STEROID;
CHIP_STRETCHING;
CHIP_TELEPORTATION;
CHIP_THORN;
CHIP_TOXIN;
CHIP_TRANQUILIZER;
CHIP_VACCINE;
CHIP_VENOM;
CHIP_WALL;
CHIP_WARM_UP;
CHIP_WHIP;
CHIP_WINGED_BOOTS;
COLOR_BLUE;
COLOR_GREEN;
COLOR_RED;
E;
EFFECT_ABSOLUTE_SHIELD;
EFFECT_AFTEREFFECT;
EFFECT_ANTIDOTE;
EFFECT_BOOST_MAX_LIFE;
EFFECT_BUFF_AGILITY;
EFFECT_BUFF_FORCE;
EFFECT_BUFF_MP;
EFFECT_BUFF_RESISTANCE;
EFFECT_BUFF_STRENGTH;
EFFECT_BUFF_TP;
EFFECT_BUFF_WISDOM;
EFFECT_DAMAGE;
EFFECT_DAMAGE_RETURN;
EFFECT_DEBUFF;
EFFECT_HEAL;
EFFECT_INVERT;
EFFECT_KILL;
EFFECT_POISON;
EFFECT_RELATIVE_SHIELD;
EFFECT_RESURRECT;
EFFECT_SHACKLE_MAGIC;
EFFECT_SHACKLE_MP;
EFFECT_SHACKLE_STRENGTH;
EFFECT_SHACKLE_TP;
EFFECT_SUMMON;
EFFECT_TARGET_ALLIES;
EFFECT_TARGET_CASTER;
EFFECT_TARGET_ENEMIES;
EFFECT_TARGET_NON_SUMMONS;
EFFECT_TARGET_NOT_CASTER;
EFFECT_TARGET_SUMMONS;
EFFECT_TELEPORT;
EFFECT_VULNERABILITY;
ENTITY_BULB;
ENTITY_LEEK;
FIGHT_CONTEXT_BATTLE_ROYALE;
FIGHT_CONTEXT_CHALLENGE;
FIGHT_CONTEXT_GARDEN;
FIGHT_CONTEXT_TEST;
FIGHT_CONTEXT_TOURNAMENT;
FIGHT_TYPE_BATTLE_ROYALE;
FIGHT_TYPE_FARMER;
FIGHT_TYPE_SOLO;
FIGHT_TYPE_TEAM;
INSTRUCTIONS_LIMIT;
MAP_BEACH;
MAP_DESERT;
MAP_FACTORY;
MAP_FOREST;
MAP_GLACIER;
MAP_NEXUS;
MAX_TURNS;
MESSAGE_ATTACK;
MESSAGE_BUFF_AGILITY;
MESSAGE_BUFF_FORCE;
MESSAGE_BUFF_MP;
MESSAGE_BUFF_TP;
MESSAGE_CUSTOM;
MESSAGE_DEBUFF;
MESSAGE_HEAL;
MESSAGE_MOVE_AWAY;
MESSAGE_MOVE_AWAY_CELL;
MESSAGE_MOVE_TOWARD;
MESSAGE_MOVE_TOWARD_CELL;
MESSAGE_SHIELD;
OPERATIONS_LIMIT;
PI;
SORT_ASC;
SORT_DESC;
TYPE_ARRAY;
TYPE_BOOLEAN;
TYPE_FUNCTION;
TYPE_NULL;
TYPE_NUMBER;
TYPE_STRING;
USE_CRITICAL;
USE_FAILED;
USE_INVALID_COOLDOWN;
USE_INVALID_POSITION;
USE_INVALID_TARGET;
USE_NOT_ENOUGH_TP;
USE_RESURRECT_INVALID_ENTITY;
USE_SUCCESS;
USE_TOO_MANY_SUMMONS;
WEAPON_AXE;
WEAPON_B_LASER;
WEAPON_BROADSWORD;
WEAPON_DESTROYER;
WEAPON_DOUBLE_GUN;
WEAPON_ELECTRISOR;
WEAPON_FLAME_THROWER;
WEAPON_GAZOR;
WEAPON_GRENADE_LAUNCHER;
WEAPON_KATANA;
WEAPON_LASER;
WEAPON_MACHINE_GUN;
WEAPON_MAGNUM;
WEAPON_M_LASER;
WEAPON_PISTOL;
WEAPON_SHOTGUN;
